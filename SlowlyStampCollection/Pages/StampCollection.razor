@page "/stampcollection"
@using SlowlyStampCollection.Data
@inject StampCollectionService StampService

<h1>SLOWLY Stamp Collection</h1>
<hr>
<div>
    <p>All the information you want and need to know about collecting stamps on SLOWLY.</p>
    <p>Total <strong>@stamps.Length</strong> stamps</p>
</div>
@if (stamps == null)
{
    <p><em>Getting there...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Image</th>
                <th>Price</th>
                <th>Name</th>
                <th>Description</th>
                <th>Region</th>
                <th>Group</th>
                <th>Rarity</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var stamp in stamps)
            {
                <tr>
                    <td>
                        <a href="javascript:;" title="@stamp.Slug">
                            <img src="@stamp.Url" alt="@stamp.StampName" @onclick="@(() => ShowLargerImage(@stamp))" />
                        </a>
                    </td>
                    <td><img src="https://web.getslowly.com/static/media/coin.a380d373.png" height="16" alt="SLOWLY_COINS" />&nbsp;@stamp.PriceCal()</td>
                    <td style="width:15%">@stamp.Name</td>
                    <td style="width:20%">@stamp.Desc</td>
                    <td style="width:10%">@stamp.Country</td>
                    <td style="width:15%">@stamp.Item_group</td>
                    <td style="width:10%">@stamp.RarityConvertion()</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private SlowlyStampCollection.Data.Item[] stamps;
    [CascadingParameter] public IModalService Modal { get; set; }

    protected override async Task OnInitializedAsync()
    {
        stamps = await StampService.GetStampAsync();
    }

    private void ShowLargerImage(Item stamp)
    {
        var parameters = new ModalParameters();
        parameters.Add(nameof(LargerStampImage.Stamp), stamp);
        Modal.Show<LargerStampImage>(stamp.Name, parameters);
    }
}
